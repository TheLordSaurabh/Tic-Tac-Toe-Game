{"ast":null,"code":"var _jsxFileName = \"/Users/saurabhgupta/Documents/GitHub/tic-tac-toe-game/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { ResetButton } from \"./components/ResetButton\";\nimport { ScoreBoard } from \"./components/ScoreBoard\";\nimport { Board } from \"./components/Board\";\nimport { RestartButton } from \"./components/RestartButton\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const win_combinations = [[0, 1, 2], [0, 3, 6], [0, 4, 8], [6, 7, 8], [2, 5, 8], [3, 4, 5], [1, 4, 7], [2, 4, 6]];\n  const [is_x_playing, setXPlaying] = useState(true);\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [scores, setScores] = useState({\n    x_score: 0,\n    o_score: 0\n  });\n  const [is_game_over, setGameOver] = useState(false);\n  const [turns, setTurns] = useState(0);\n  const mainBoardHandling = boxIdx => {\n    // Update the board\n    const updatedBoard = board.map((value, idx) => {\n      if (idx === boxIdx) {\n        return is_x_playing ? \"X\" : \"O\";\n      } else {\n        return value;\n      }\n    });\n    setBoard(updatedBoard);\n    const count = turn + 1;\n    setTurns(count);\n\n    //Check for winner and update the score\n    const winner = checkForWinner(updatedBoard);\n    if (winner) {\n      if (winner === \"O\") {\n        let {\n          o_score\n        } = scores;\n        o_score += 1;\n        setScores({\n          ...scores,\n          o_score\n        });\n      } else {\n        let {\n          x_score\n        } = scores;\n        x_score += 1;\n        setScores({\n          ...scores,\n          x_score\n        });\n      }\n      alert(`Player - ${winner} won the round ;)`);\n      setTimeout(nextRound(), 3000);\n    }\n\n    //Alternating the player\n    setXPlaying(!is_x_playing);\n\n    //check if all boxes are filled and there is draw\n    if (turn == 9 && is_game_over == false) {\n      alert(`Draw :0`);\n      nextRound();\n      setTimeout(nextRound(), 3000);\n    }\n  };\n  const resetCount = () => {};\n  const restartGame = () => {\n    let conf_msg = \"Do you want to restart the game??\";\n    if (!window.confirm(conf_msg)) {\n      return;\n    }\n    setTurns(0);\n    setGameOver(false);\n    setBoard(Array(9).fill(null));\n    setScores({\n      x_score: 0,\n      o_score: 0\n    });\n  };\n  const resetBoard = () => {\n    let conf_msg = \"Do you want to reset the Board??\";\n    if (!window.confirm(conf_msg)) {\n      return;\n    }\n    resetCount();\n    setGameOver(false);\n    setBoard(Array(9).fill(null));\n  };\n  const nextRound = () => {\n    resetCount();\n    setGameOver(false);\n    setBoard(Array(9).fill(null));\n  };\n  const checkForWinner = board => {\n    for (let i = 0; i < win_combinations.length; i++) {\n      const [x, y, z] = win_combinations[i];\n\n      // Iterate through win conditions and check if either player satisfies them\n      if (board[x] && board[x] === board[y] && board[y] === board[z]) {\n        setGameOver(true);\n        return board[x];\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(ScoreBoard, {\n      scores: scores,\n      is_x_playing: is_x_playing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RestartButton, {\n      restartGame: restartGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResetButton, {\n      resetBoard: resetBoard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      board: board,\n      onClick: is_game_over ? resetBoard : mainBoardHandling\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"O3ke2yoeFgyhsr2U8mkSFu/4FRg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ResetButton","ScoreBoard","Board","RestartButton","jsxDEV","_jsxDEV","App","_s","win_combinations","is_x_playing","setXPlaying","board","setBoard","Array","fill","scores","setScores","x_score","o_score","is_game_over","setGameOver","turns","setTurns","mainBoardHandling","boxIdx","updatedBoard","map","value","idx","count","turn","winner","checkForWinner","alert","setTimeout","nextRound","resetCount","restartGame","conf_msg","window","confirm","resetBoard","i","length","x","y","z","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/saurabhgupta/Documents/GitHub/tic-tac-toe-game/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nimport { ResetButton } from \"./components/ResetButton\";\nimport { ScoreBoard } from \"./components/ScoreBoard\";\nimport { Board } from \"./components/Board\";\nimport {RestartButton} from \"./components/RestartButton\";\n\nimport './App.css';\n\nconst App = () => {\n\n  const win_combinations = [[0, 1, 2],[0, 3, 6],[0, 4, 8],[6, 7, 8],[2, 5, 8],[3, 4, 5],[1, 4, 7],[2, 4, 6]];\n\n  const [is_x_playing, setXPlaying] = useState(true);\n  const [board, setBoard] = useState(Array(9).fill(null))\n  const [scores, setScores] = useState({ x_score: 0, o_score: 0 })\n  const [is_game_over, setGameOver] = useState(false);\n  const [turns, setTurns] = useState(0);\n  const mainBoardHandling = (boxIdx) => {\n    // Update the board\n    const updatedBoard = board.map((value, idx) => {\n      if (idx === boxIdx) {\n        return is_x_playing ? \"X\" : \"O\";\n      } \n      else {\n        return value;\n      }\n    })\n\n    setBoard(updatedBoard);\n\n    const count = turn + 1;\n    setTurns(count);\n\n\n    //Check for winner and update the score\n    const winner = checkForWinner(updatedBoard);\n\n    if (winner) {\n      if (winner === \"O\") {\n        let { o_score } = scores;\n        o_score += 1;\n        setScores({ ...scores, o_score })\n      } \n      else {\n        let { x_score } = scores;\n        x_score += 1;\n        setScores({ ...scores, x_score })\n      }\n      alert(`Player - ${winner} won the round ;)`);\n      setTimeout(nextRound(),3000);\n    }\n\n    //Alternating the player\n    setXPlaying(!is_x_playing);\n\n    //check if all boxes are filled and there is draw\n    if(turn == 9 && is_game_over == false){\n      alert(`Draw :0`);\n      nextRound();\n      setTimeout(nextRound(),3000);\n    }\n  }\n\n\n  const resetCount = () => {\n    \n  }\n\n  const restartGame = () => {\n      let conf_msg = \"Do you want to restart the game??\";\n      if(!window.confirm(conf_msg)){\n        return;\n      }\n      setTurns(0);\n      setGameOver(false);\n      setBoard(Array(9).fill(null));\n      setScores({ x_score: 0, o_score: 0 });\n  }\n\n  const resetBoard = () => {\n    let conf_msg = \"Do you want to reset the Board??\";\n    if(!window.confirm(conf_msg)){\n      return;\n    }\n    resetCount();\n    setGameOver(false);\n    setBoard(Array(9).fill(null));\n  }\n\n  const nextRound = () => {\n    resetCount();\n    setGameOver(false);\n    setBoard(Array(9).fill(null));\n  }\n\n  const checkForWinner = (board) => {\n    for (let i = 0; i < win_combinations.length; i++) {\n      const [x, y, z] = win_combinations[i];\n\n      // Iterate through win conditions and check if either player satisfies them\n      if (board[x] && board[x] === board[y] && board[y] === board[z]) {\n        setGameOver(true);\n        return board[x];\n      }\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <ScoreBoard scores={scores} is_x_playing={is_x_playing} />\n      <RestartButton restartGame = {restartGame}/>\n      <ResetButton resetBoard={resetBoard} />\n      <Board board={board} onClick={is_game_over ? resetBoard : mainBoardHandling} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAEvC,SAASC,WAAW,QAAQ,0BAA0B;AACtD,SAASC,UAAU,QAAQ,yBAAyB;AACpD,SAASC,KAAK,QAAQ,oBAAoB;AAC1C,SAAQC,aAAa,QAAO,4BAA4B;AAExD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEhB,MAAMC,gBAAgB,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAE1G,MAAM,CAACC,YAAY,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAACc,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;EACvD,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGjB,QAAQ,CAAC;IAAEkB,OAAO,EAAE,CAAC;IAAEC,OAAO,EAAE;EAAE,CAAC,CAAC;EAChE,MAAM,CAACC,YAAY,EAAEC,WAAW,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACsB,KAAK,EAAEC,QAAQ,CAAC,GAAGvB,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAMwB,iBAAiB,GAAIC,MAAM,IAAK;IACpC;IACA,MAAMC,YAAY,GAAGd,KAAK,CAACe,GAAG,CAAC,CAACC,KAAK,EAAEC,GAAG,KAAK;MAC7C,IAAIA,GAAG,KAAKJ,MAAM,EAAE;QAClB,OAAOf,YAAY,GAAG,GAAG,GAAG,GAAG;MACjC,CAAC,MACI;QACH,OAAOkB,KAAK;MACd;IACF,CAAC,CAAC;IAEFf,QAAQ,CAACa,YAAY,CAAC;IAEtB,MAAMI,KAAK,GAAGC,IAAI,GAAG,CAAC;IACtBR,QAAQ,CAACO,KAAK,CAAC;;IAGf;IACA,MAAME,MAAM,GAAGC,cAAc,CAACP,YAAY,CAAC;IAE3C,IAAIM,MAAM,EAAE;MACV,IAAIA,MAAM,KAAK,GAAG,EAAE;QAClB,IAAI;UAAEb;QAAQ,CAAC,GAAGH,MAAM;QACxBG,OAAO,IAAI,CAAC;QACZF,SAAS,CAAC;UAAE,GAAGD,MAAM;UAAEG;QAAQ,CAAC,CAAC;MACnC,CAAC,MACI;QACH,IAAI;UAAED;QAAQ,CAAC,GAAGF,MAAM;QACxBE,OAAO,IAAI,CAAC;QACZD,SAAS,CAAC;UAAE,GAAGD,MAAM;UAAEE;QAAQ,CAAC,CAAC;MACnC;MACAgB,KAAK,CAAE,YAAWF,MAAO,mBAAkB,CAAC;MAC5CG,UAAU,CAACC,SAAS,EAAE,EAAC,IAAI,CAAC;IAC9B;;IAEA;IACAzB,WAAW,CAAC,CAACD,YAAY,CAAC;;IAE1B;IACA,IAAGqB,IAAI,IAAI,CAAC,IAAIX,YAAY,IAAI,KAAK,EAAC;MACpCc,KAAK,CAAE,SAAQ,CAAC;MAChBE,SAAS,EAAE;MACXD,UAAU,CAACC,SAAS,EAAE,EAAC,IAAI,CAAC;IAC9B;EACF,CAAC;EAGD,MAAMC,UAAU,GAAGA,CAAA,KAAM,CAEzB,CAAC;EAED,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACtB,IAAIC,QAAQ,GAAG,mCAAmC;IAClD,IAAG,CAACC,MAAM,CAACC,OAAO,CAACF,QAAQ,CAAC,EAAC;MAC3B;IACF;IACAhB,QAAQ,CAAC,CAAC,CAAC;IACXF,WAAW,CAAC,KAAK,CAAC;IAClBR,QAAQ,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7BE,SAAS,CAAC;MAAEC,OAAO,EAAE,CAAC;MAAEC,OAAO,EAAE;IAAE,CAAC,CAAC;EACzC,CAAC;EAED,MAAMuB,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAIH,QAAQ,GAAG,kCAAkC;IACjD,IAAG,CAACC,MAAM,CAACC,OAAO,CAACF,QAAQ,CAAC,EAAC;MAC3B;IACF;IACAF,UAAU,EAAE;IACZhB,WAAW,CAAC,KAAK,CAAC;IAClBR,QAAQ,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;EAC/B,CAAC;EAED,MAAMqB,SAAS,GAAGA,CAAA,KAAM;IACtBC,UAAU,EAAE;IACZhB,WAAW,CAAC,KAAK,CAAC;IAClBR,QAAQ,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;EAC/B,CAAC;EAED,MAAMkB,cAAc,GAAIrB,KAAK,IAAK;IAChC,KAAK,IAAI+B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlC,gBAAgB,CAACmC,MAAM,EAAED,CAAC,EAAE,EAAE;MAChD,MAAM,CAACE,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,GAAGtC,gBAAgB,CAACkC,CAAC,CAAC;;MAErC;MACA,IAAI/B,KAAK,CAACiC,CAAC,CAAC,IAAIjC,KAAK,CAACiC,CAAC,CAAC,KAAKjC,KAAK,CAACkC,CAAC,CAAC,IAAIlC,KAAK,CAACkC,CAAC,CAAC,KAAKlC,KAAK,CAACmC,CAAC,CAAC,EAAE;QAC9D1B,WAAW,CAAC,IAAI,CAAC;QACjB,OAAOT,KAAK,CAACiC,CAAC,CAAC;MACjB;IACF;EACF,CAAC;EAED,oBACEvC,OAAA;IAAK0C,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClB3C,OAAA,CAACJ,UAAU;MAACc,MAAM,EAAEA,MAAO;MAACN,YAAY,EAAEA;IAAa;MAAAwC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eAC1D/C,OAAA,CAACF,aAAa;MAACkC,WAAW,EAAIA;IAAY;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAE,eAC5C/C,OAAA,CAACL,WAAW;MAACyC,UAAU,EAAEA;IAAW;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eACvC/C,OAAA,CAACH,KAAK;MAACS,KAAK,EAAEA,KAAM;MAAC0C,OAAO,EAAElC,YAAY,GAAGsB,UAAU,GAAGlB;IAAkB;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAC3E;AAEV,CAAC;AAAA7C,EAAA,CA3GKD,GAAG;AAAAgD,EAAA,GAAHhD,GAAG;AA6GT,eAAeA,GAAG;AAAC,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}